{"version":3,"file":"stripe-angular.js","sources":["ng://stripe-angular/StripeTypes.ts","ng://stripe-angular/StripeScriptTag.ts","ng://stripe-angular/components/StripeComponent.ts","ng://stripe-angular/components/StripeSource.component.ts","ng://stripe-angular/components/StripeCard.component.ts","ng://stripe-angular/components/StripeBank.component.ts","ng://stripe-angular/index.ts","ng://stripe-angular/stripe-angular.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>('Stripe Publishable Key')\nexport const STRIPE_OPTIONS = new InjectionToken<StripeInstanceOptions>('Stripe Options')\n\nexport interface Stripe{\n  (string:string,options?:StripeInstanceOptions):StripeInstance\n}\n\nexport interface StripeInstance{\n  elements       : (options?:any)=>any\n  createToken    : (elements:any, options?:StripeInstanceOptions)=>any\n  createSource   : (elements:any, options?:StripeInstanceOptions)=>any\n  retrieveSource : ()=>any\n  paymentRequest : ()=>any\n}\n\nexport interface StripeInstanceOptions{\n  stripeAccount ?: string;\n}\n\nexport interface StripeCard{\n  id                  : string\n  object              : \"card\"|string\n  name                : string\n  address_city        : string\n  address_country     : string\n  address_line1       : string\n  address_line1_check : string\n  address_line2       : string\n  address_state       : string\n  address_zip         : string\n  address_zip_check   : string\n  brand               : string\n  country             : string\n  cvc_check           : string\n  dynamic_last4       : string\n  exp_month           : number\n  exp_year            : number\n  funding             : string\n  last4               : string\n  metadata            : any\n  tokenization_method : any\n}\n\nexport interface StripeToken{\n  id        : string\n  object    : string\n  card      : StripeCard\n  client_ip : string\n  created   : number\n  livemode  : boolean\n  type      : \"card\"|string\n  used      : boolean\n}\n\nexport interface StripeSource {\n  id        : string\n  object    : string\n  card      : StripeCard\n  client_ip : string\n  created   : number\n  livemode  : boolean\n  status    : string\n  type      : \"card\" | string\n  usage     : string\n}\n\nexport interface StripeStyle{\n  color          : string\n  fontFamily     : string\n  fontSize       : string\n  fontSmoothing  : string\n  fontStyle      : string\n  fontVariant    : string\n  iconColor      : string\n  lineHeight     : string\n  letterSpacing  : string\n  textAlign      : string\n  textDecoration : string\n  textShadow     : string\n  textTransform  : string\n}\n\nexport interface StripeStyling{\n  base     : StripeStyle\n  complete : StripeStyle\n  empty    : StripeStyle\n  invalid  : StripeStyle\n}\n\nexport interface StripeClasses{\n  base     : string\n  complete : string\n  empty    : string\n  focus    : string\n  invalid  : string\n  webkitAutofill:string\n}\n\nexport interface StripeCardOptions{\n  classes        : StripeClasses\n  hidePostalCode : boolean\n  hideIcon       : boolean\n  iconStyle      : string\n  placeholder    : string\n  style          : StripeStyling\n}","import { Injectable, Inject } from \"@angular/core\"\n\nimport {\n  Stripe, StripeInstance, StripeInstanceOptions, STRIPE_PUBLISHABLE_KEY, STRIPE_OPTIONS\n  //, StripeCard, StripeToken\n} from \"./StripeTypes\"\n\n@Injectable({providedIn: 'root'}) export class StripeScriptTag{\n  src:string = \"https://js.stripe.com/v3/\"\n  Stripe!:Stripe//set at runtime\n  StripeInstance!:StripeInstance\n  load:Promise<any>\n\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) key?: string,\n    @Inject(STRIPE_OPTIONS) options?: StripeInstanceOptions\n  ){\n    this.load = this.injectIntoHead()\n    if (key) this.setPublishableKey(key, options)\n  }\n\n  promiseStripe():Promise<Stripe>{\n    return this.load\n  }\n\n  promiseInstance():Promise<StripeInstance>{\n    return this.promiseStripe()\n    .then(stripe=>{\n      if( !this.StripeInstance ){\n        const err = new Error(\"Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()\")\n        err[\"code\"] = \"STRIPEKEYNOTSET\"\n        throw err\n        //return Promise.reject( err )\n      }\n\n      return this.StripeInstance\n    })\n  }\n\n  setPublishableKey(\n    key:string,\n    options?:StripeInstanceOptions\n  ):Promise<StripeInstance>{\n    return this.load.then( ()=>\n      this.StripeInstance=this.Stripe(key, options)\n    )\n  }\n\n  injectIntoHead():Promise<Stripe>{\n    if( window[\"Stripe\"] ){\n      return Promise.resolve( this.Stripe=window[\"Stripe\"] )\n    }\n\n    return new Promise((res,rej)=>{\n      const head = this.getTargetTagDropElement()\n      const script = document.createElement(\"script\")\n      script.setAttribute(\"src\", this.src)\n      script.setAttribute(\"type\", \"text/javascript\")\n\n      script.addEventListener(\"load\",()=>{\n        this.Stripe = this.grabStripe()\n        res( this.Stripe )\n      })\n\n      head.appendChild(script)\n    })\n  }\n\n  grabStripe(){\n    return window[\"Stripe\"]\n  }\n\n  getTargetTagDropElement(){\n    let elm = document.getElementsByTagName(\"head\")\n\n    if(elm.length)return elm[0]\n\n    return document.getElementsByTagName(\"body\")[0]\n  }\n}\n","import {\n  Input, Output, EventEmitter\n} from \"@angular/core\"\nimport {\n  StripeInstance\n} from \"../StripeTypes\"\nimport { StripeScriptTag } from \"../StripeScriptTag\"\n\nexport class StripeComponent{\n  @Output(\"catch\") catcher:EventEmitter<Error> = new EventEmitter()\n\n  @Input() invalid!:Error\n  @Output() invalidChange:EventEmitter<Error> = new EventEmitter()\n\n  stripe!:StripeInstance\n\n  constructor(\n    public StripeScriptTag:StripeScriptTag\n  ){}\n\n  ngOnInit(){\n    this.init()\n  }\n\n  init():Promise<StripeInstance>{\n    return this.StripeScriptTag.promiseInstance()\n    .then( i=>this.stripe=i )\n  }\n}","import {\n  Input, Output, EventEmitter, Component\n} from \"@angular/core\"\nimport {\n  StripeToken, StripeSource as StripeSourceType\n} from \"../StripeTypes\"\nimport { StripeScriptTag } from \"../StripeScriptTag\"\nimport { StripeComponent } from \"./StripeComponent\"\n\n@Component({\n  selector: \"stripe-source\",\n  template: `\n      <ng-container *ngIf=\"!StripeScriptTag.StripeInstance\">\n          <div style=\"color:red;\">Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()</div>\n      </ng-container>\n  `,\n  exportAs:\"StripeSource\"\n}) export class StripeSource extends StripeComponent{\n\n  @Input() source!:StripeSourceType\n  @Output() sourceChange:EventEmitter<StripeSourceType> = new EventEmitter()\n\n  elements:any\n\n  constructor(\n    public StripeScriptTag:StripeScriptTag\n  ){\n    super(StripeScriptTag)\n  }\n\n  createSource():Promise<StripeToken>{\n    delete this.invalid\n    this.invalidChange.emit(this.invalid)\n\n    return this.stripe.createSource(\n      this.elements\n    )\n    .then((result:any)=>{\n      if(result.error){\n        if( result.error.type==\"validation_error\" ){\n          this.invalidChange.emit( this.invalid=result.error )\n        }else{\n          this.catcher.emit(result.error)\n          throw result.error\n        }\n      }else{\n        this.sourceChange.emit(this.source=result.source)\n        return result.source\n      }\n    })\n  }\n}\n","import {\n  ElementRef, Input, Output, EventEmitter, Component } from \"@angular/core\"\nimport {\n  StripeToken, StripeCardOptions } from \"../StripeTypes\"\nimport { StripeScriptTag } from \"../StripeScriptTag\"\nimport { StripeSource } from \"./StripeSource.component\"\n\n@Component({\n  selector: \"stripe-card\",\n  template: `\n      <ng-container *ngIf=\"!StripeScriptTag.StripeInstance\">\n          <div style=\"color:red;\">Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()</div>\n      </ng-container>\n  `,\n  exportAs:\"StripeCard\"\n}) export class StripeCard extends StripeSource{\n  @Input() options!:StripeCardOptions\n\n  @Input() token!:StripeToken\n  @Output() tokenChange:EventEmitter<StripeToken> = new EventEmitter()\n\n  @Output() cardMounted:EventEmitter<any> = new EventEmitter()\n\n  constructor(\n    public ElementRef:ElementRef,\n    public StripeScriptTag:StripeScriptTag\n  ){\n    super(StripeScriptTag)\n  }\n\n  ngOnInit(){\n    super.init()\n    .then(()=>{\n      this.elements = this.stripe.elements().create('card', this.options)\n      this.elements.mount(this.ElementRef.nativeElement)\n      \n      this.cardMounted.emit(this.elements);\n\n      this.elements.addEventListener('change', (result:any)=>{\n        if( result.error ){\n          this.invalidChange.emit( this.invalid=result.error )\n        }\n      })\n    })\n  }\n\n  createToken(\n    extraData?:any\n  ):Promise<StripeToken>{\n    delete this.invalid\n    this.invalidChange.emit(this.invalid)\n\n    return this.stripe.createToken(this.elements, extraData)\n    .then((result:any)=>{\n      if(result.error){\n        if( result.error.type==\"validation_error\" ){\n          this.invalidChange.emit( this.invalid=result.error )\n        }else{\n          this.catcher.emit(result.error)\n          throw result.error\n        }\n      }else{\n        this.tokenChange.emit(this.token=result.token)\n        return result.token\n      }\n    })\n  }\n}\n","import {\n  Input, Output, EventEmitter, Component\n} from \"@angular/core\"\nimport { StripeCardOptions } from \"../StripeTypes\"\nimport { StripeComponent } from \"./StripeComponent\"\nimport { StripeToken } from \"../StripeTypes\"\nimport { StripeScriptTag } from \"../StripeScriptTag\"\n\nexport interface bank_account{\n  country             : string\n  currency            : string\n  routing_number      : string\n  account_number      : string\n  account_holder_name : string\n  account_holder_type : string\n}\n\n@Component({\n  selector: \"stripe-bank\",\n  template: `\n      <ng-container *ngIf=\"!StripeScriptTag.StripeInstance\">\n          <div style=\"color:red;\">Stripe PublishableKey NOT SET. Use method StripeScriptTag.setPublishableKey()</div>\n      </ng-container>\n  `,\n  exportAs:\"StripeBank\"\n}) export class StripeBank extends StripeComponent{\n  @Input() options!:StripeCardOptions//very similar type to card options\n\n  @Input() token!:StripeToken\n  @Output() tokenChange:EventEmitter<StripeToken> = new EventEmitter()\n\n  constructor(\n    public StripeScriptTag:StripeScriptTag\n  ){\n    super(StripeScriptTag)\n  }\n\n  createToken( data?:any ):Promise<StripeToken>{\n    delete this.invalid\n    this.invalidChange.emit(this.invalid)\n\n    return this.stripe.createToken('bank_account', data)\n    .then((result:any)=>{\n      if(result.error){\n        if( result.error.type==\"validation_error\" ){\n          this.invalidChange.emit( this.invalid=result.error )\n        }else{\n          this.catcher.emit(result.error)\n          throw result.error\n        }\n      }else{\n        this.tokenChange.emit(this.token=result.token)\n        return result.token\n      }\n    })\n  }\n}\n","export * from \"./StripeTypes\"\n\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { StripeInstanceOptions, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from './StripeTypes'\n\nimport { StripeScriptTag } from \"./StripeScriptTag\"\nexport { StripeScriptTag } from \"./StripeScriptTag\"\n\nimport { StripeSource } from \"./components/StripeSource.component\"\nexport { StripeSource } from \"./components/StripeSource.component\"\n\nimport { StripeCard } from \"./components/StripeCard.component\"\nexport { StripeCard } from \"./components/StripeCard.component\"\n\nimport { StripeBank } from \"./components/StripeBank.component\"\nexport { bank_account, StripeBank } from \"./components/StripeBank.component\"\n\nconst declarations = [\n  StripeSource,\n  StripeCard,\n  StripeBank\n]\n\n@NgModule({\n  imports:[\n    CommonModule\n  ],\n  declarations: declarations,\n // providers: [ StripeScriptTag ],\n  exports:[ ...declarations ]\n}) export class StripeModule {\n  static forRoot(publishableKey?: string, options?: StripeInstanceOptions): ModuleWithProviders<StripeModule> {\n    return {\n      ngModule: StripeModule,\n      providers: [\n        StripeScriptTag,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ],\n    }\n  }\n}\n\n/**\n * @deprecated Please import `StripeModule` directly\n */\nexport const Module = StripeModule\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {StripeComponent as ɵa} from './components/StripeComponent';"],"names":[],"mappings":"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"}